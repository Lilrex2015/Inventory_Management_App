/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/client.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/dom-form-serializer/dist/dom-form-serializer.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/dom-form-serializer/dist/dom-form-serializer.mjs ***!
  \***********************************************************************/
/*! exports provided: serialize, deserialize */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"serialize\", function() { return serialize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"deserialize\", function() { return deserialize; });\n/* harmony import */ var matches_selector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! matches-selector */ \"./node_modules/matches-selector/index.js\");\n\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar asyncGenerator = function () {\n  function AwaitValue(value) {\n    this.value = value;\n  }\n\n  function AsyncGenerator(gen) {\n    var front, back;\n\n    function send(key, arg) {\n      return new Promise(function (resolve, reject) {\n        var request = {\n          key: key,\n          arg: arg,\n          resolve: resolve,\n          reject: reject,\n          next: null\n        };\n\n        if (back) {\n          back = back.next = request;\n        } else {\n          front = back = request;\n          resume(key, arg);\n        }\n      });\n    }\n\n    function resume(key, arg) {\n      try {\n        var result = gen[key](arg);\n        var value = result.value;\n\n        if (value instanceof AwaitValue) {\n          Promise.resolve(value.value).then(function (arg) {\n            resume(\"next\", arg);\n          }, function (arg) {\n            resume(\"throw\", arg);\n          });\n        } else {\n          settle(result.done ? \"return\" : \"normal\", result.value);\n        }\n      } catch (err) {\n        settle(\"throw\", err);\n      }\n    }\n\n    function settle(type, value) {\n      switch (type) {\n        case \"return\":\n          front.resolve({\n            value: value,\n            done: true\n          });\n          break;\n\n        case \"throw\":\n          front.reject(value);\n          break;\n\n        default:\n          front.resolve({\n            value: value,\n            done: false\n          });\n          break;\n      }\n\n      front = front.next;\n\n      if (front) {\n        resume(front.key, front.arg);\n      } else {\n        back = null;\n      }\n    }\n\n    this._invoke = send;\n\n    if (typeof gen.return !== \"function\") {\n      this.return = undefined;\n    }\n  }\n\n  if (typeof Symbol === \"function\" && Symbol.asyncIterator) {\n    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {\n      return this;\n    };\n  }\n\n  AsyncGenerator.prototype.next = function (arg) {\n    return this._invoke(\"next\", arg);\n  };\n\n  AsyncGenerator.prototype.throw = function (arg) {\n    return this._invoke(\"throw\", arg);\n  };\n\n  AsyncGenerator.prototype.return = function (arg) {\n    return this._invoke(\"return\", arg);\n  };\n\n  return {\n    wrap: function (fn) {\n      return function () {\n        return new AsyncGenerator(fn.apply(this, arguments));\n      };\n    },\n    await: function (value) {\n      return new AwaitValue(value);\n    }\n  };\n}();\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar TypeRegistry = function () {\n  function TypeRegistry() {\n    var initial = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    classCallCheck(this, TypeRegistry);\n\n    this.registeredTypes = initial;\n  }\n\n  createClass(TypeRegistry, [{\n    key: 'get',\n    value: function get(type) {\n      if (typeof this.registeredTypes[type] !== 'undefined') {\n        return this.registeredTypes[type];\n      } else {\n        return this.registeredTypes['default'];\n      }\n    }\n  }, {\n    key: 'register',\n    value: function register(type, item) {\n      if (typeof this.registeredTypes[type] === 'undefined') {\n        this.registeredTypes[type] = item;\n      }\n    }\n  }, {\n    key: 'registerDefault',\n    value: function registerDefault(item) {\n      this.register('default', item);\n    }\n  }]);\n  return TypeRegistry;\n}();\n\nvar KeyExtractors = function (_TypeRegistry) {\n  inherits(KeyExtractors, _TypeRegistry);\n\n  function KeyExtractors(options) {\n    classCallCheck(this, KeyExtractors);\n\n    var _this = possibleConstructorReturn(this, (KeyExtractors.__proto__ || Object.getPrototypeOf(KeyExtractors)).call(this, options));\n\n    _this.registerDefault(function (el) {\n      return el.getAttribute('name') || '';\n    });\n    return _this;\n  }\n\n  return KeyExtractors;\n}(TypeRegistry);\n\nvar InputReaders = function (_TypeRegistry) {\n  inherits(InputReaders, _TypeRegistry);\n\n  function InputReaders(options) {\n    classCallCheck(this, InputReaders);\n\n    var _this = possibleConstructorReturn(this, (InputReaders.__proto__ || Object.getPrototypeOf(InputReaders)).call(this, options));\n\n    _this.registerDefault(function (el) {\n      return el.value;\n    });\n    _this.register('checkbox', function (el) {\n      return el.getAttribute('value') !== null ? el.checked ? el.getAttribute('value') : null : el.checked;\n    });\n    _this.register('select', function (el) {\n      return getSelectValue(el);\n    });\n    return _this;\n  }\n\n  return InputReaders;\n}(TypeRegistry);\n\nfunction getSelectValue(elem) {\n  var value, option, i;\n  var options = elem.options;\n  var index = elem.selectedIndex;\n  var one = elem.type === 'select-one';\n  var values = one ? null : [];\n  var max = one ? index + 1 : options.length;\n\n  if (index < 0) {\n    i = max;\n  } else {\n    i = one ? index : 0;\n  }\n\n  // Loop through all the selected options\n  for (; i < max; i++) {\n    option = options[i];\n\n    // Support: IE <=9 only\n    // IE8-9 doesn't update selected after form reset\n    if ((option.selected || i === index) &&\n\n    // Don't return options that are disabled or in a disabled optgroup\n    !option.disabled && (!option.parentNode.disabled || option.parentNode.tagName.toLowerCase() === 'optgroup')) {\n      // Get the specific value for the option\n      value = option.value;\n\n      // We don't need an array for one selects\n      if (one) {\n        return value;\n      }\n\n      // Multi-Selects return an array\n      values.push(value);\n    }\n  }\n\n  return values;\n}\n\nvar KeyAssignmentValidators = function (_TypeRegistry) {\n  inherits(KeyAssignmentValidators, _TypeRegistry);\n\n  function KeyAssignmentValidators(options) {\n    classCallCheck(this, KeyAssignmentValidators);\n\n    var _this = possibleConstructorReturn(this, (KeyAssignmentValidators.__proto__ || Object.getPrototypeOf(KeyAssignmentValidators)).call(this, options));\n\n    _this.registerDefault(function () {\n      return true;\n    });\n    _this.register('radio', function (el) {\n      return el.checked;\n    });\n    return _this;\n  }\n\n  return KeyAssignmentValidators;\n}(TypeRegistry);\n\nfunction keySplitter(key) {\n  var matches = key.match(/[^[\\]]+/g);\n  var lastKey = void 0;\n  if (key.length > 1 && key.indexOf('[]') === key.length - 2) {\n    lastKey = matches.pop();\n    matches.push([lastKey]);\n  }\n  return matches;\n}\n\nfunction getElementType(el) {\n  var typeAttr = void 0;\n  var tagName = el.tagName;\n  var type = tagName;\n  if (tagName.toLowerCase() === 'input') {\n    typeAttr = el.getAttribute('type');\n    if (typeAttr) {\n      type = typeAttr;\n    } else {\n      type = 'text';\n    }\n  }\n  return type.toLowerCase();\n}\n\nfunction getInputElements(element, options) {\n  return Array.prototype.filter.call(element.querySelectorAll('input,select,textarea'), function (el) {\n    if (el.tagName.toLowerCase() === 'input' && (el.type === 'submit' || el.type === 'reset')) {\n      return false;\n    }\n    var myType = getElementType(el);\n    var extractor = options.keyExtractors.get(myType);\n    var identifier = extractor(el);\n    var foundInInclude = (options.include || []).indexOf(identifier) !== -1;\n    var foundInExclude = (options.exclude || []).indexOf(identifier) !== -1;\n    var foundInIgnored = false;\n    var reject = false;\n\n    if (options.ignoredTypes) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = options.ignoredTypes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var selector = _step.value;\n\n          if (matches_selector__WEBPACK_IMPORTED_MODULE_0__(el, selector)) {\n            foundInIgnored = true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    if (foundInInclude) {\n      reject = false;\n    } else {\n      if (options.include) {\n        reject = true;\n      } else {\n        reject = foundInExclude || foundInIgnored;\n      }\n    }\n\n    return !reject;\n  });\n}\n\nfunction assignKeyValue(obj, keychain, value) {\n  if (!keychain) {\n    return obj;\n  }\n\n  var key = keychain.shift();\n\n  // build the current object we need to store data\n  if (!obj[key]) {\n    obj[key] = Array.isArray(key) ? [] : {};\n  }\n\n  // if it's the last key in the chain, assign the value directly\n  if (keychain.length === 0) {\n    if (!Array.isArray(obj[key])) {\n      obj[key] = value;\n    } else if (value !== null) {\n      obj[key].push(value);\n    }\n  }\n\n  // recursive parsing of the array, depth-first\n  if (keychain.length > 0) {\n    assignKeyValue(obj[key], keychain, value);\n  }\n\n  return obj;\n}\n\n/**\n * Get a JSON object that represents all of the form inputs, in this element.\n *\n * @param {HTMLElement} Root element\n * @param {object} options\n * @param {object} options.inputReaders\n * @param {object} options.keyAssignmentValidators\n * @param {object} options.keyExtractors\n * @param {object} options.keySplitter\n * @param {string[]} options.include\n * @param {string[]} options.exclude\n * @param {string[]} options.ignoredTypes\n * @return {object}\n */\nfunction serialize(element) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var data = {};\n  options.keySplitter = options.keySplitter || keySplitter;\n  options.keyExtractors = new KeyExtractors(options.keyExtractors || {});\n  options.inputReaders = new InputReaders(options.inputReaders || {});\n  options.keyAssignmentValidators = new KeyAssignmentValidators(options.keyAssignmentValidators || {});\n\n  Array.prototype.forEach.call(getInputElements(element, options), function (el) {\n    var type = getElementType(el);\n    var keyExtractor = options.keyExtractors.get(type);\n    var key = keyExtractor(el);\n    var inputReader = options.inputReaders.get(type);\n    var value = inputReader(el);\n    var validKeyAssignment = options.keyAssignmentValidators.get(type);\n    if (validKeyAssignment(el, key, value)) {\n      var keychain = options.keySplitter(key);\n      data = assignKeyValue(data, keychain, value);\n    }\n  });\n\n  return data;\n}\n\nvar InputWriters = function (_TypeRegistry) {\n  inherits(InputWriters, _TypeRegistry);\n\n  function InputWriters(options) {\n    classCallCheck(this, InputWriters);\n\n    var _this = possibleConstructorReturn(this, (InputWriters.__proto__ || Object.getPrototypeOf(InputWriters)).call(this, options));\n\n    _this.registerDefault(function (el, value) {\n      el.value = value;\n    });\n    _this.register('checkbox', function (el, value) {\n      if (value === null) {\n        el.indeterminate = true;\n      } else {\n        el.checked = Array.isArray(value) ? value.indexOf(el.value) !== -1 : value;\n      }\n    });\n    _this.register('radio', function (el, value) {\n      if (value !== undefined) {\n        el.checked = el.value === value.toString();\n      }\n    });\n    _this.register('select', setSelectValue);\n    return _this;\n  }\n\n  return InputWriters;\n}(TypeRegistry);\n\nfunction makeArray(arr) {\n  var ret = [];\n  if (arr !== null) {\n    if (Array.isArray(arr)) {\n      ret.push.apply(ret, arr);\n    } else {\n      ret.push(arr);\n    }\n  }\n  return ret;\n}\n\n/**\n * Write select values\n *\n * @see {@link https://github.com/jquery/jquery/blob/master/src/attributes/val.js|Github}\n * @param {object} Select element\n * @param {string|array} Select value\n */\nfunction setSelectValue(elem, value) {\n  var optionSet, option;\n  var options = elem.options;\n  var values = makeArray(value);\n  var i = options.length;\n\n  while (i--) {\n    option = options[i];\n    /* eslint-disable no-cond-assign */\n    if (values.indexOf(option.value) > -1) {\n      option.setAttribute('selected', true);\n      optionSet = true;\n    }\n    /* eslint-enable no-cond-assign */\n  }\n\n  // Force browsers to behave consistently when non-matching value is set\n  if (!optionSet) {\n    elem.selectedIndex = -1;\n  }\n}\n\nfunction keyJoiner(parentKey, childKey) {\n  return parentKey + '[' + childKey + ']';\n}\n\nfunction flattenData(data, parentKey) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var flatData = {};\n  var keyJoiner$$ = options.keyJoiner || keyJoiner;\n\n  for (var keyName in data) {\n    if (!data.hasOwnProperty(keyName)) {\n      continue;\n    }\n\n    var value = data[keyName];\n    var hash = {};\n\n    // If there is a parent key, join it with\n    // the current, child key.\n    if (parentKey) {\n      keyName = keyJoiner$$(parentKey, keyName);\n    }\n\n    if (Array.isArray(value)) {\n      hash[keyName + '[]'] = value;\n      hash[keyName] = value;\n    } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {\n      hash = flattenData(value, keyName, options);\n    } else {\n      hash[keyName] = value;\n    }\n\n    Object.assign(flatData, hash);\n  }\n\n  return flatData;\n}\n\n/**\n * Use the given JSON object to populate all of the form inputs, in this element.\n *\n * @param {HTMLElement} Root element\n * @param {object} options\n * @param {object} options.inputWriters\n * @param {object} options.keyExtractors\n * @param {object} options.keySplitter\n * @param {string[]} options.include\n * @param {string[]} options.exclude\n * @param {string[]} options.ignoredTypes\n */\nfunction deserialize(form, data) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var flattenedData = flattenData(data, null, options);\n  options.keyExtractors = new KeyExtractors(options.keyExtractors || {});\n  options.inputWriters = new InputWriters(options.inputWriters || {});\n\n  Array.prototype.forEach.call(getInputElements(form, options), function (el) {\n    var type = getElementType(el);\n\n    var keyExtractor = options.keyExtractors.get(type);\n    var key = keyExtractor(el);\n\n    var inputWriter = options.inputWriters.get(type);\n    var value = flattenedData[key];\n\n    inputWriter(el, value);\n  });\n}\n\n\n//# sourceMappingURL=dom-form-serializer.mjs.map\n\n\n//# sourceURL=webpack:///./node_modules/dom-form-serializer/dist/dom-form-serializer.mjs?");

/***/ }),

/***/ "./node_modules/matches-selector/index.js":
/*!************************************************!*\
  !*** ./node_modules/matches-selector/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar proto = typeof Element !== 'undefined' ? Element.prototype : {};\nvar vendor = proto.matches\n  || proto.matchesSelector\n  || proto.webkitMatchesSelector\n  || proto.mozMatchesSelector\n  || proto.msMatchesSelector\n  || proto.oMatchesSelector;\n\nmodule.exports = match;\n\n/**\n * Match `el` to `selector`.\n *\n * @param {Element} el\n * @param {String} selector\n * @return {Boolean}\n * @api public\n */\n\nfunction match(el, selector) {\n  if (!el || el.nodeType !== 1) return false;\n  if (vendor) return vendor.call(el, selector);\n  var nodes = el.parentNode.querySelectorAll(selector);\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i] == el) return true;\n  }\n  return false;\n}\n\n\n//# sourceURL=webpack:///./node_modules/matches-selector/index.js?");

/***/ }),

/***/ "./src/client.js":
/*!***********************!*\
  !*** ./src/client.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*                                           ===================================\r\nTHIS IS THE CLIENT SIDE OF THE PROJECT THAT  |*** CONNECTS TO THE HTML PAGE *** |\r\n                                              ==================================\r\n*/ \r\n\r\nwindow.onload = () => {\r\n\r\n\r\n\r\n//global scope variables seciton\r\n\r\nmyModule = {};\r\n\r\nconst serialize = __webpack_require__(/*! dom-form-serializer */ \"./node_modules/dom-form-serializer/dist/dom-form-serializer.mjs\").serialize\r\nconst tableGen = document.getElementById(\"InvTable\");\r\nconst tableDIV = document.getElementById(\"tableView\");\r\nconst tbody = document.getElementById(\"tBodyID\");\r\nconst formID = document.getElementById(\"FormID\");\r\nconst findFormID = document.getElementById(\"findFormID\");\r\nlet dataGlobe = {};\r\n\r\n\r\n\r\n/*========================================*/\r\n\r\n/*========================================*/\r\n\r\n/* \r\n==========================================================================================================================================\r\nThere was issues with DOM loading and timing within the JS functions, so I made it async load and the windows on load for event listeners.\r\n===========================================================================================================================================\r\n*/\r\n\r\n\r\n    document.getElementById(\"FormID\").addEventListener(\"submit\" , (e) =>\r\n    {\r\n        console.log(\"form event listener activated\");\r\n        e.preventDefault();\r\n        console.log(\"default prevented\");\r\n        console.log(\"formID: \" , e);\r\n        myModule.addToTable(e);\r\n\r\n    });\r\n\r\n    document.getElementById(\"checkAll\").addEventListener(\"click\" , () =>{\r\n\r\n        formID.style.visibility = \"hidden\";\r\n        findFormID.style.visibility = \"hidden\";\r\n        tableDIV.style.display = \"initial\";\r\n        myModule.checkAllInv();\r\n\r\n    });\r\n\r\n\r\n    document.getElementById(\"AddItem\").addEventListener(\"click\", ()=> {\r\n\r\n        tableDIV.style.display = \"none\";\r\n        findFormID.style.visibility = \"hidden\";\r\n        formID.style.visibility = \"visible\";\r\n\r\n\r\n    });\r\n\r\n   document.getElementById(\"FindItem\").addEventListener(\"click\" , () => {\r\n\r\n    \r\n    tableDIV.style.display = \"none\";\r\n    formID.style.visibility = \"hidden\";\r\n    findFormID.style.visibility = \"visible\";\r\n  \r\n    });\r\n\r\n    document.getElementById(\"findFormID\").addEventListener(\"submit\" , (itemName) => {\r\n\r\n        console.log(\"Prevent find default\");\r\n        itemName.preventDefault();\r\n        console.log(\"itemName: \", itemName);\r\n        findFormID.style.visibility = \"hidden\";\r\n        tableDIV.style.display = \"initial\";\r\n      myModule.findItem(itemName);\r\n      \r\n        });\r\n    \r\n/*========================================*/\r\n\r\n/*========================================*/\r\n\r\n/* \r\n==========================================================================================================================================\r\nThis function pulls the inventory from the db file located on the server. \r\n===========================================================================================================================================\r\n*/\r\n\r\nfunction checkAllInv()\r\n{\r\n   \r\n    fetch('/inventory', {\r\n\r\n        method: 'GET',\r\n        'content-type': 'application/json'\r\n    })\r\n\r\n    .then((response) =>{\r\n\r\n        console.log('response ', response);\r\n\r\n        response.json().then(data => {\r\n\r\n\r\n            dataGlobe = data;\r\n            printHTML(dataGlobe);\r\n        })\r\n\r\n    })\r\n\r\n    \r\n\r\n\r\n.catch(err => {\r\n\r\nconsole.log(\"error: error spotted\");\r\n\r\n})\r\n\r\n}\r\n\r\n/*========================================*/\r\n\r\n/*========================================*/\r\n\r\n/* \r\n==========================================================================================================================================\r\nThis function adds new items to the database file.\r\n===========================================================================================================================================\r\n*/\r\n\r\n\r\nfunction addToTable(e)\r\n{\r\n\r\n\r\n    const serialForm = serialize(document.querySelector('#FormID')); //this reads the form from the HTML page\r\n    console.log(\"serialform: \" , serialForm); //the converted form to JSON object\r\n    const stringedJSON = JSON.stringify(serialForm); //Stringifying the JSON to send to the server bc it will reconvert to JSON when it gets there automatically\r\n   \r\n    \r\n\r\n    // this function \"talks to the server and adds the item that was entered into the form into the database\"\r\nconst result = fetch('/inventory' , {\r\n\r\n    method: 'post',\r\n    headers : {\r\n\r\n        'Content-Type' : 'application/json',\r\n    },\r\n\r\n    body: stringedJSON,\r\n    \r\n\r\n})\r\n\r\n.then((resp) => {\r\n\r\nconsole.log(\"resp \" , resp);\r\n\r\n});\r\n\r\n\r\n\r\n};\r\n\r\n/*========================================*/\r\n\r\n/*========================================*/\r\n\r\n/* \r\n==========================================================================================================================================\r\nThis function finds particular items in the database\r\n===========================================================================================================================================\r\n*/\r\n\r\n\r\nfunction findItem(itemName)\r\n{\r\n\r\n    console.log(\"ItemName \" , itemName)\r\n    const serialFormFind = serialize(document.querySelector('#findFormID')); //this reads the form from the HTML page\r\n    console.log(\"serialform: \" , serialFormFind); //the converted form to JSON object\r\n    const stringedJSONFind = JSON.stringify(serialFormFind); //Stringifying the JSON to send to the server bc it will reconvert to JSON when it gets there automatically\r\n   \r\n    console.log(\"Find item: \" , stringedJSONFind)\r\n\r\n    fetch('/findItem' , {\r\n\r\n        method: 'post',\r\n\r\n        headers : {\r\n\r\n            'Content-Type' : 'application/json',\r\n        },\r\n      \r\n        body: stringedJSONFind,\r\n\r\n\r\n    })\r\n\r\n    .then((resp)=> {\r\n\r\n       return resp.json();\r\n    })\r\n\r\n   .then((dataJson) => {\r\n\r\n    console.log(\"data: \" , dataJson.data);\r\n\r\n    Printfind(dataJson);\r\n  \r\n\r\n   })\r\n    \r\n}\r\n\r\n/*========================================*/\r\n\r\n/*========================================*/\r\n\r\n/* \r\n==========================================================================================================================================\r\nThis function deletes items from the database, but cannot be undone once processed. \r\n===========================================================================================================================================\r\n*/\r\n\r\n\r\nfunction deleteItem()\r\n{\r\n\r\n}\r\n\r\n/*========================================*/\r\n\r\n/*========================================*/\r\n\r\n/* \r\n==========================================================================================================================================\r\nThis function adds new items to the database file.\r\n===========================================================================================================================================\r\n*/\r\n\r\n\r\nfunction printHTML(e)\r\n{\r\n   let tablerowCount = tableGen.getElementsByTagName('tr');\r\n   let rowCount = tablerowCount.length;\r\n\r\n   console.log(\"rowcount= \" , rowCount);\r\n\r\n   for(let x = rowCount-1; x>0; x--)\r\n   {\r\n       tableGen.removeChild(tablerowCount[x]);\r\n   }\r\n\r\n   \r\n    for(let i in e.data)\r\n    {\r\n        console.log(`id is: ${e.data[i]._id}`);\r\n\r\n        let rows = \"\";\r\n        let newTr = document.createElement(\"tr\");\r\n        // let newTd = document.createElement(\"td\"); // not needed now but maybe later in refactor\r\n        let checkstatus = false;  \r\n      \r\n      \r\n     \r\n    \r\n      if(e.data[i].quantity < e.data[i].target)\r\n      {\r\n         // alert(`${e.data[i].name} ${e.data[i].model} is currently low on stock, a reorder might be needed soon`);\r\n          rows = `<td>${e.data[i].name}</td> <td>${e.data[i].model} </td> <td>$${e.data[i].cost}</td><td bgcolor=\"#FF0000\">${e.data[i].quantity}</td><td>${e.data[i].target}</td><td>${e.data[i].reorder}</td><td>${e.data[i].shelf}</td>`;\r\n\r\n      }\r\n\r\n      else if(e.data[i].quantity == e.data[i].target)\r\n      {\r\n        rows = `<td>${e.data[i].name}</td> <td>${e.data[i].model} </td> <td>$${e.data[i].cost}</td><td bgcolor=\"#FFFF00\">${e.data[i].quantity}</td><td>${e.data[i].target}</td><td>${e.data[i].reorder}</td><td>${e.data[i].shelf}</td>`;\r\n\r\n      }\r\n\r\n      else{\r\n\r\n        rows = `<td> ${e.data[i].name}</td> <td> ${e.data[i].model} </td> <td>$${e.data[i].cost}</td><td bgcolor=\"#00FF00\">${e.data[i].quantity}</td><td>${e.data[i].target}</td><td>${e.data[i].reorder}</td><td>${e.data[i].shelf}</td>`;\r\n\r\n      }\r\n      newTr.innerHTML = rows;\r\n      tableGen.appendChild(newTr);\r\n\r\n    }\r\n\r\n   \r\n}\r\n\r\nfunction Printfind(e)\r\n{\r\n    let tablerowCount = tableGen.getElementsByTagName('tr');\r\n    let rowCount = tablerowCount.length;\r\n \r\n    console.log(\"rowcount= \" , rowCount);\r\n\r\n    for(let x = rowCount-1; x>0; x--)\r\n    {\r\n        tableGen.removeChild(tablerowCount[x]);\r\n    }\r\n         let rows = \"\";\r\n         let newTr = document.createElement(\"tr\");\r\n         // let newTd = document.createElement(\"td\"); // not needed now but maybe later in refactor\r\n     \r\n       if((e.data.quantity < e.data.target))\r\n       {\r\n          alert(`${e.data[i].name} ${e.data[i].model} is currently low on stock, a reorder might be needed soon`);\r\n           rows = `<td>${e.data.name}</td> <td>${e.data.model} </td> <td>$${e.data.cost}</td><td bgcolor=\"#FF0000\">${e.data.quantity}</td><td>${e.data.target}</td><td>${e.data.reorder}</td><td>${e.data.shelf}</td>`;\r\n \r\n       }\r\n \r\n       else if(e.data.quantity == e.data.target)\r\n       {\r\n        rows = `<td>${e.data.name}</td> <td>${e.data.model} </td> <td>$${e.data.cost}</td><td bgcolor=\"#FFFF00\">${e.data.quantity}</td><td>${e.data.target}</td><td>${e.data.reorder}</td><td>${e.data.shelf}</td>`;\r\n \r\n       }\r\n \r\n       else{\r\n \r\n        rows = `<td>${e.data.name}</td> <td>${e.data.model} </td> <td>$${e.data.cost}</td><td bgcolor=\"#00FF00\">${e.data.quantity}</td><td>${e.data.target}</td><td>${e.data.reorder}</td><td>${e.data.shelf}</td>`;\r\n \r\n       }\r\n       newTr.innerHTML = rows;\r\n       tableGen.appendChild(newTr);\r\n \r\n     }\r\n \r\n\r\n\r\nwindow.myModule = {\r\n    \r\n addToTable: addToTable,   \r\n checkAllInv: checkAllInv,\r\n findItem: findItem,\r\n deleteItem: deleteItem,\r\n\r\n}\r\n\r\n} // end on window.onload function\n\n//# sourceURL=webpack:///./src/client.js?");

/***/ })

/******/ });